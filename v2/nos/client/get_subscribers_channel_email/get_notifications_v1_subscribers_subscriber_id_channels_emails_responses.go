// Code generated by go-swagger; DO NOT EDIT.

package get_subscribers_channel_email

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariadb-corporation/skysql-api-go/v2/nos/models"
)

// GetNotificationsV1SubscribersSubscriberIDChannelsEmailsReader is a Reader for the GetNotificationsV1SubscribersSubscriberIDChannelsEmails structure.
type GetNotificationsV1SubscribersSubscriberIDChannelsEmailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK creates a GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK with default headers values
func NewGetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK() *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK {
	return &GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK{}
}

/* GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK describes a response with status code 200, with default header values.

OK
*/
type GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK struct {
	Payload []*models.DtoChannelEmail
}

func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscribers/{subscriber_id}/channels/emails][%d] getNotificationsV1SubscribersSubscriberIdChannelsEmailsOK  %+v", 200, o.Payload)
}
func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK) GetPayload() []*models.DtoChannelEmail {
	return o.Payload
}

func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized creates a GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized with default headers values
func NewGetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized() *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized {
	return &GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized{}
}

/* GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized struct {
	Payload *models.ErrrErrorResponse
}

func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscribers/{subscriber_id}/channels/emails][%d] getNotificationsV1SubscribersSubscriberIdChannelsEmailsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized) GetPayload() *models.ErrrErrorResponse {
	return o.Payload
}

func (o *GetNotificationsV1SubscribersSubscriberIDChannelsEmailsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrrErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
