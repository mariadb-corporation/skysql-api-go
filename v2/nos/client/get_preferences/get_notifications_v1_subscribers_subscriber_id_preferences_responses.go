// Code generated by go-swagger; DO NOT EDIT.

package get_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariadb-corporation/skysql-api-go/v2/nos/models"
)

// GetNotificationsV1SubscribersSubscriberIDPreferencesReader is a Reader for the GetNotificationsV1SubscribersSubscriberIDPreferences structure.
type GetNotificationsV1SubscribersSubscriberIDPreferencesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationsV1SubscribersSubscriberIDPreferencesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNotificationsV1SubscribersSubscriberIDPreferencesOK creates a GetNotificationsV1SubscribersSubscriberIDPreferencesOK with default headers values
func NewGetNotificationsV1SubscribersSubscriberIDPreferencesOK() *GetNotificationsV1SubscribersSubscriberIDPreferencesOK {
	return &GetNotificationsV1SubscribersSubscriberIDPreferencesOK{}
}

/* GetNotificationsV1SubscribersSubscriberIDPreferencesOK describes a response with status code 200, with default header values.

OK
*/
type GetNotificationsV1SubscribersSubscriberIDPreferencesOK struct {
	Payload []*models.DtoPreference
}

func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesOK) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscribers/{subscriber_id}/preferences][%d] getNotificationsV1SubscribersSubscriberIdPreferencesOK  %+v", 200, o.Payload)
}
func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesOK) GetPayload() []*models.DtoPreference {
	return o.Payload
}

func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized creates a GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized with default headers values
func NewGetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized() *GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized {
	return &GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized{}
}

/* GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized struct {
	Payload *models.ErrrErrorResponse
}

func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscribers/{subscriber_id}/preferences][%d] getNotificationsV1SubscribersSubscriberIdPreferencesUnauthorized  %+v", 401, o.Payload)
}
func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized) GetPayload() *models.ErrrErrorResponse {
	return o.Payload
}

func (o *GetNotificationsV1SubscribersSubscriberIDPreferencesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrrErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
