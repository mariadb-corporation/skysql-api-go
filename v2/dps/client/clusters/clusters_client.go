// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetProvisioningV1InternalClusterClusterID(params *GetProvisioningV1InternalClusterClusterIDParams, opts ...ClientOption) (*GetProvisioningV1InternalClusterClusterIDOK, error)

	PatchProvisioningV1InternalClusterClusterID(params *PatchProvisioningV1InternalClusterClusterIDParams, opts ...ClientOption) (*PatchProvisioningV1InternalClusterClusterIDNoContent, error)

	PostProvisioningV1InternalClusters(params *PostProvisioningV1InternalClustersParams, opts ...ClientOption) (*PostProvisioningV1InternalClustersCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetProvisioningV1InternalClusterClusterID gets cluster by ID detailed

  Retrieve a cluster by ID with additional details
*/
func (a *Client) GetProvisioningV1InternalClusterClusterID(params *GetProvisioningV1InternalClusterClusterIDParams, opts ...ClientOption) (*GetProvisioningV1InternalClusterClusterIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1InternalClusterClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1InternalClusterClusterID",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/internal/cluster/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1InternalClusterClusterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1InternalClusterClusterIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1InternalClusterClusterID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProvisioningV1InternalClusterClusterID updates cluster

  Update the cluster
*/
func (a *Client) PatchProvisioningV1InternalClusterClusterID(params *PatchProvisioningV1InternalClusterClusterIDParams, opts ...ClientOption) (*PatchProvisioningV1InternalClusterClusterIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProvisioningV1InternalClusterClusterIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchProvisioningV1InternalClusterClusterID",
		Method:             "PATCH",
		PathPattern:        "/provisioning/v1/internal/cluster/{cluster_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProvisioningV1InternalClusterClusterIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchProvisioningV1InternalClusterClusterIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchProvisioningV1InternalClusterClusterID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1InternalClusters creates a new cluster

  Create a new cluster
*/
func (a *Client) PostProvisioningV1InternalClusters(params *PostProvisioningV1InternalClustersParams, opts ...ClientOption) (*PostProvisioningV1InternalClustersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1InternalClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1InternalClusters",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/internal/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1InternalClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1InternalClustersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1InternalClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
