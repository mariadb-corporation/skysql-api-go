// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProvisioningV1ServicesServiceID(params *DeleteProvisioningV1ServicesServiceIDParams, opts ...ClientOption) (*DeleteProvisioningV1ServicesServiceIDOK, error)

	DeleteProvisioningV1ServicesServiceIDSecurityAllowlist(params *DeleteProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*DeleteProvisioningV1ServicesServiceIDSecurityAllowlistOK, error)

	GetProvisioningV1InternalServicesServiceID(params *GetProvisioningV1InternalServicesServiceIDParams, opts ...ClientOption) (*GetProvisioningV1InternalServicesServiceIDOK, error)

	GetProvisioningV1Services(params *GetProvisioningV1ServicesParams, opts ...ClientOption) (*GetProvisioningV1ServicesOK, error)

	GetProvisioningV1ServicesServiceID(params *GetProvisioningV1ServicesServiceIDParams, opts ...ClientOption) (*GetProvisioningV1ServicesServiceIDOK, error)

	GetProvisioningV1ServicesServiceIDSecurityAllowlist(params *GetProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*GetProvisioningV1ServicesServiceIDSecurityAllowlistOK, error)

	PatchProvisioningV1InternalServicesServiceID(params *PatchProvisioningV1InternalServicesServiceIDParams, opts ...ClientOption) (*PatchProvisioningV1InternalServicesServiceIDNoContent, error)

	PostProvisioningV1Services(params *PostProvisioningV1ServicesParams, opts ...ClientOption) (*PostProvisioningV1ServicesAccepted, error)

	PostProvisioningV1ServicesServiceIDNodes(params *PostProvisioningV1ServicesServiceIDNodesParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDNodesOK, error)

	PostProvisioningV1ServicesServiceIDPower(params *PostProvisioningV1ServicesServiceIDPowerParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDPowerOK, error)

	PostProvisioningV1ServicesServiceIDSecurityAllowlist(params *PostProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDSecurityAllowlistOK, error)

	PostProvisioningV1ServicesServiceIDSize(params *PostProvisioningV1ServicesServiceIDSizeParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDSizeAccepted, error)

	PostProvisioningV1ServicesServiceIDStorageIops(params *PostProvisioningV1ServicesServiceIDStorageIopsParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDStorageIopsAccepted, error)

	PostProvisioningV1ServicesServiceIDStorageSize(params *PostProvisioningV1ServicesServiceIDStorageSizeParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDStorageSizeAccepted, error)

	PutProvisioningV1ServicesServiceIDSecurityAllowlist(params *PutProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*PutProvisioningV1ServicesServiceIDSecurityAllowlistOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteProvisioningV1ServicesServiceID deletes service

  Delete the specified services and its associated data
*/
func (a *Client) DeleteProvisioningV1ServicesServiceID(params *DeleteProvisioningV1ServicesServiceIDParams, opts ...ClientOption) (*DeleteProvisioningV1ServicesServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvisioningV1ServicesServiceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProvisioningV1ServicesServiceID",
		Method:             "DELETE",
		PathPattern:        "/provisioning/v1/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProvisioningV1ServicesServiceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProvisioningV1ServicesServiceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProvisioningV1ServicesServiceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProvisioningV1ServicesServiceIDSecurityAllowlist removes allowed address

  Remove an address from the servicesâ€™s allowlist
*/
func (a *Client) DeleteProvisioningV1ServicesServiceIDSecurityAllowlist(params *DeleteProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*DeleteProvisioningV1ServicesServiceIDSecurityAllowlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvisioningV1ServicesServiceIDSecurityAllowlistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProvisioningV1ServicesServiceIDSecurityAllowlist",
		Method:             "DELETE",
		PathPattern:        "/provisioning/v1/services/{service_id}/security/allowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProvisioningV1ServicesServiceIDSecurityAllowlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProvisioningV1ServicesServiceIDSecurityAllowlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProvisioningV1ServicesServiceIDSecurityAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1InternalServicesServiceID gets service by ID

  Retrieve a service by ID with additional details
*/
func (a *Client) GetProvisioningV1InternalServicesServiceID(params *GetProvisioningV1InternalServicesServiceIDParams, opts ...ClientOption) (*GetProvisioningV1InternalServicesServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1InternalServicesServiceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1InternalServicesServiceID",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/internal/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1InternalServicesServiceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1InternalServicesServiceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1InternalServicesServiceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1Services lists services

  Retrieve a list of services
*/
func (a *Client) GetProvisioningV1Services(params *GetProvisioningV1ServicesParams, opts ...ClientOption) (*GetProvisioningV1ServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Services",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Services: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1ServicesServiceID gets service by ID

  Retrieve a service by ID
*/
func (a *Client) GetProvisioningV1ServicesServiceID(params *GetProvisioningV1ServicesServiceIDParams, opts ...ClientOption) (*GetProvisioningV1ServicesServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ServicesServiceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1ServicesServiceID",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ServicesServiceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ServicesServiceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1ServicesServiceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1ServicesServiceIDSecurityAllowlist reads allowed addresses

  Retrieve a list of IP addresses
*/
func (a *Client) GetProvisioningV1ServicesServiceIDSecurityAllowlist(params *GetProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*GetProvisioningV1ServicesServiceIDSecurityAllowlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ServicesServiceIDSecurityAllowlistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1ServicesServiceIDSecurityAllowlist",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/services/{service_id}/security/allowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ServicesServiceIDSecurityAllowlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ServicesServiceIDSecurityAllowlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1ServicesServiceIDSecurityAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProvisioningV1InternalServicesServiceID updates service

  Update the service
*/
func (a *Client) PatchProvisioningV1InternalServicesServiceID(params *PatchProvisioningV1InternalServicesServiceIDParams, opts ...ClientOption) (*PatchProvisioningV1InternalServicesServiceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProvisioningV1InternalServicesServiceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchProvisioningV1InternalServicesServiceID",
		Method:             "PATCH",
		PathPattern:        "/provisioning/v1/internal/services/{service_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProvisioningV1InternalServicesServiceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchProvisioningV1InternalServicesServiceIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchProvisioningV1InternalServicesServiceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1Services creates a new service

  Create a new service
*/
func (a *Client) PostProvisioningV1Services(params *PostProvisioningV1ServicesParams, opts ...ClientOption) (*PostProvisioningV1ServicesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1Services",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1Services: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1ServicesServiceIDNodes updates service nodes

  Update the number of nodes for a service
*/
func (a *Client) PostProvisioningV1ServicesServiceIDNodes(params *PostProvisioningV1ServicesServiceIDNodesParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesServiceIDNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1ServicesServiceIDNodes",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services/{service_id}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesServiceIDNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesServiceIDNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1ServicesServiceIDNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1ServicesServiceIDPower sets service power state

  Set Power State of the Service
*/
func (a *Client) PostProvisioningV1ServicesServiceIDPower(params *PostProvisioningV1ServicesServiceIDPowerParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDPowerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesServiceIDPowerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1ServicesServiceIDPower",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services/{service_id}/power",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesServiceIDPowerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesServiceIDPowerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1ServicesServiceIDPower: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1ServicesServiceIDSecurityAllowlist adds allowed address

  Add an address to the servicesâ€™s allowlist
*/
func (a *Client) PostProvisioningV1ServicesServiceIDSecurityAllowlist(params *PostProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDSecurityAllowlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesServiceIDSecurityAllowlistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1ServicesServiceIDSecurityAllowlist",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services/{service_id}/security/allowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesServiceIDSecurityAllowlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesServiceIDSecurityAllowlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1ServicesServiceIDSecurityAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1ServicesServiceIDSize updates service size

  Update the node size of a service
*/
func (a *Client) PostProvisioningV1ServicesServiceIDSize(params *PostProvisioningV1ServicesServiceIDSizeParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDSizeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesServiceIDSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1ServicesServiceIDSize",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services/{service_id}/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesServiceIDSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesServiceIDSizeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1ServicesServiceIDSize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1ServicesServiceIDStorageIops sets service storage

  Sets the service storage IOPS and storage type
*/
func (a *Client) PostProvisioningV1ServicesServiceIDStorageIops(params *PostProvisioningV1ServicesServiceIDStorageIopsParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDStorageIopsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesServiceIDStorageIopsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1ServicesServiceIDStorageIops",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services/{service_id}/storage/iops",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesServiceIDStorageIopsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesServiceIDStorageIopsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1ServicesServiceIDStorageIops: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1ServicesServiceIDStorageSize sets service storage

  Sets the service storage size
*/
func (a *Client) PostProvisioningV1ServicesServiceIDStorageSize(params *PostProvisioningV1ServicesServiceIDStorageSizeParams, opts ...ClientOption) (*PostProvisioningV1ServicesServiceIDStorageSizeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ServicesServiceIDStorageSizeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1ServicesServiceIDStorageSize",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/services/{service_id}/storage/size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ServicesServiceIDStorageSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ServicesServiceIDStorageSizeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1ServicesServiceIDStorageSize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutProvisioningV1ServicesServiceIDSecurityAllowlist updates allowed address

  Updated the servicesâ€™s allowlist
*/
func (a *Client) PutProvisioningV1ServicesServiceIDSecurityAllowlist(params *PutProvisioningV1ServicesServiceIDSecurityAllowlistParams, opts ...ClientOption) (*PutProvisioningV1ServicesServiceIDSecurityAllowlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProvisioningV1ServicesServiceIDSecurityAllowlistParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProvisioningV1ServicesServiceIDSecurityAllowlist",
		Method:             "PUT",
		PathPattern:        "/provisioning/v1/services/{service_id}/security/allowlist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProvisioningV1ServicesServiceIDSecurityAllowlistReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProvisioningV1ServicesServiceIDSecurityAllowlistOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProvisioningV1ServicesServiceIDSecurityAllowlist: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
