// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new offering API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for offering API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetProvisioningV1Providers(params *GetProvisioningV1ProvidersParams, opts ...ClientOption) (*GetProvisioningV1ProvidersOK, error)

	GetProvisioningV1ProvidersProviderNameVolumeTypes(params *GetProvisioningV1ProvidersProviderNameVolumeTypesParams, opts ...ClientOption) (*GetProvisioningV1ProvidersProviderNameVolumeTypesOK, error)

	GetProvisioningV1Regions(params *GetProvisioningV1RegionsParams, opts ...ClientOption) (*GetProvisioningV1RegionsOK, error)

	GetProvisioningV1ServiceTypes(params *GetProvisioningV1ServiceTypesParams, opts ...ClientOption) (*GetProvisioningV1ServiceTypesOK, error)

	GetProvisioningV1Sizes(params *GetProvisioningV1SizesParams, opts ...ClientOption) (*GetProvisioningV1SizesOK, error)

	GetProvisioningV1Tiers(params *GetProvisioningV1TiersParams, opts ...ClientOption) (*GetProvisioningV1TiersOK, error)

	GetProvisioningV1Topologies(params *GetProvisioningV1TopologiesParams, opts ...ClientOption) (*GetProvisioningV1TopologiesOK, error)

	GetProvisioningV1Versions(params *GetProvisioningV1VersionsParams, opts ...ClientOption) (*GetProvisioningV1VersionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetProvisioningV1Providers reads providers

  Retrieve a list of available cloud providers in which to host the database
*/
func (a *Client) GetProvisioningV1Providers(params *GetProvisioningV1ProvidersParams, opts ...ClientOption) (*GetProvisioningV1ProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Providers",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Providers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1ProvidersProviderNameVolumeTypes reads volume types

  Retrieve a list of available volume types for a specific cloud providers in which to host the database
*/
func (a *Client) GetProvisioningV1ProvidersProviderNameVolumeTypes(params *GetProvisioningV1ProvidersProviderNameVolumeTypesParams, opts ...ClientOption) (*GetProvisioningV1ProvidersProviderNameVolumeTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ProvidersProviderNameVolumeTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1ProvidersProviderNameVolumeTypes",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/providers/{provider_name}/volume-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ProvidersProviderNameVolumeTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ProvidersProviderNameVolumeTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1ProvidersProviderNameVolumeTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1Regions reads regions

  Retrieve a list of available geographic regions into which a database cluster may be deployed
*/
func (a *Client) GetProvisioningV1Regions(params *GetProvisioningV1RegionsParams, opts ...ClientOption) (*GetProvisioningV1RegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1RegionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Regions",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1RegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1RegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Regions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1ServiceTypes retrieves a list of available database services types to choose from e g transactions analytics
*/
func (a *Client) GetProvisioningV1ServiceTypes(params *GetProvisioningV1ServiceTypesParams, opts ...ClientOption) (*GetProvisioningV1ServiceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ServiceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1ServiceTypes",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/service-types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ServiceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ServiceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1ServiceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1Sizes reads sizes

  Retrieve a list of available node sizes that may be used for the database cluster
*/
func (a *Client) GetProvisioningV1Sizes(params *GetProvisioningV1SizesParams, opts ...ClientOption) (*GetProvisioningV1SizesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1SizesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Sizes",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/sizes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1SizesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1SizesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Sizes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1Tiers reads tiers

  Retrieve a list of available tiers in which a services may be created
*/
func (a *Client) GetProvisioningV1Tiers(params *GetProvisioningV1TiersParams, opts ...ClientOption) (*GetProvisioningV1TiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1TiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Tiers",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1TiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1TiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Tiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1Topologies reads topologies

  Retrieve a list of valid topologies for a specified service_type which may be deployed
*/
func (a *Client) GetProvisioningV1Topologies(params *GetProvisioningV1TopologiesParams, opts ...ClientOption) (*GetProvisioningV1TopologiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1TopologiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Topologies",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/topologies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1TopologiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1TopologiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Topologies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1Versions reads versions

  Retrieve a list of valid database versions which may be chosen for database deployment
*/
func (a *Client) GetProvisioningV1Versions(params *GetProvisioningV1VersionsParams, opts ...ClientOption) (*GetProvisioningV1VersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1VersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Versions",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1VersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1VersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
