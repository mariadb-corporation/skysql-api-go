// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProvisioningV1SizesParams creates a new GetProvisioningV1SizesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProvisioningV1SizesParams() *GetProvisioningV1SizesParams {
	return &GetProvisioningV1SizesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProvisioningV1SizesParamsWithTimeout creates a new GetProvisioningV1SizesParams object
// with the ability to set a timeout on a request.
func NewGetProvisioningV1SizesParamsWithTimeout(timeout time.Duration) *GetProvisioningV1SizesParams {
	return &GetProvisioningV1SizesParams{
		timeout: timeout,
	}
}

// NewGetProvisioningV1SizesParamsWithContext creates a new GetProvisioningV1SizesParams object
// with the ability to set a context for a request.
func NewGetProvisioningV1SizesParamsWithContext(ctx context.Context) *GetProvisioningV1SizesParams {
	return &GetProvisioningV1SizesParams{
		Context: ctx,
	}
}

// NewGetProvisioningV1SizesParamsWithHTTPClient creates a new GetProvisioningV1SizesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProvisioningV1SizesParamsWithHTTPClient(client *http.Client) *GetProvisioningV1SizesParams {
	return &GetProvisioningV1SizesParams{
		HTTPClient: client,
	}
}

/* GetProvisioningV1SizesParams contains all the parameters to send to the API endpoint
   for the get provisioning v1 sizes operation.

   Typically these are written to a http.Request.
*/
type GetProvisioningV1SizesParams struct {

	/* PageOrder.

	   page_order
	*/
	PageOrder *string

	/* PageSize.

	   page_size

	   Default: 10
	*/
	PageSize *int64

	/* PageToken.

	   page_token
	*/
	PageToken *string

	/* Provider.

	   Provider
	*/
	Provider *string

	/* ServiceType.

	   ServiceType
	*/
	ServiceType *string

	/* Tier.

	   Tier
	*/
	Tier *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get provisioning v1 sizes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProvisioningV1SizesParams) WithDefaults() *GetProvisioningV1SizesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get provisioning v1 sizes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProvisioningV1SizesParams) SetDefaults() {
	var (
		pageSizeDefault = int64(10)
	)

	val := GetProvisioningV1SizesParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithTimeout(timeout time.Duration) *GetProvisioningV1SizesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithContext(ctx context.Context) *GetProvisioningV1SizesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithHTTPClient(client *http.Client) *GetProvisioningV1SizesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageOrder adds the pageOrder to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithPageOrder(pageOrder *string) *GetProvisioningV1SizesParams {
	o.SetPageOrder(pageOrder)
	return o
}

// SetPageOrder adds the pageOrder to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetPageOrder(pageOrder *string) {
	o.PageOrder = pageOrder
}

// WithPageSize adds the pageSize to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithPageSize(pageSize *int64) *GetProvisioningV1SizesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithPageToken(pageToken *string) *GetProvisioningV1SizesParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithProvider adds the provider to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithProvider(provider *string) *GetProvisioningV1SizesParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithServiceType adds the serviceType to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithServiceType(serviceType *string) *GetProvisioningV1SizesParams {
	o.SetServiceType(serviceType)
	return o
}

// SetServiceType adds the serviceType to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetServiceType(serviceType *string) {
	o.ServiceType = serviceType
}

// WithTier adds the tier to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) WithTier(tier *string) *GetProvisioningV1SizesParams {
	o.SetTier(tier)
	return o
}

// SetTier adds the tier to the get provisioning v1 sizes params
func (o *GetProvisioningV1SizesParams) SetTier(tier *string) {
	o.Tier = tier
}

// WriteToRequest writes these params to a swagger request
func (o *GetProvisioningV1SizesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageOrder != nil {

		// query param page_order
		var qrPageOrder string

		if o.PageOrder != nil {
			qrPageOrder = *o.PageOrder
		}
		qPageOrder := qrPageOrder
		if qPageOrder != "" {

			if err := r.SetQueryParam("page_order", qPageOrder); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string

		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {

			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}
	}

	if o.ServiceType != nil {

		// query param service_type
		var qrServiceType string

		if o.ServiceType != nil {
			qrServiceType = *o.ServiceType
		}
		qServiceType := qrServiceType
		if qServiceType != "" {

			if err := r.SetQueryParam("service_type", qServiceType); err != nil {
				return err
			}
		}
	}

	if o.Tier != nil {

		// query param tier
		var qrTier string

		if o.Tier != nil {
			qrTier = *o.Tier
		}
		qTier := qrTier
		if qTier != "" {

			if err := r.SetQueryParam("tier", qTier); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
