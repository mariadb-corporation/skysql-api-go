// Code generated by go-swagger; DO NOT EDIT.

package offering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/mariadb-corporation/skysql-api-go/v2/dps/models"
)

// GetProvisioningV1ServiceTypesReader is a Reader for the GetProvisioningV1ServiceTypes structure.
type GetProvisioningV1ServiceTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProvisioningV1ServiceTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProvisioningV1ServiceTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProvisioningV1ServiceTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProvisioningV1ServiceTypesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProvisioningV1ServiceTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProvisioningV1ServiceTypesOK creates a GetProvisioningV1ServiceTypesOK with default headers values
func NewGetProvisioningV1ServiceTypesOK() *GetProvisioningV1ServiceTypesOK {
	return &GetProvisioningV1ServiceTypesOK{}
}

/* GetProvisioningV1ServiceTypesOK describes a response with status code 200, with default header values.

OK
*/
type GetProvisioningV1ServiceTypesOK struct {
	Payload []*models.V1ServiceType
}

func (o *GetProvisioningV1ServiceTypesOK) Error() string {
	return fmt.Sprintf("[GET /provisioning/v1/service-types][%d] getProvisioningV1ServiceTypesOK  %+v", 200, o.Payload)
}
func (o *GetProvisioningV1ServiceTypesOK) GetPayload() []*models.V1ServiceType {
	return o.Payload
}

func (o *GetProvisioningV1ServiceTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProvisioningV1ServiceTypesBadRequest creates a GetProvisioningV1ServiceTypesBadRequest with default headers values
func NewGetProvisioningV1ServiceTypesBadRequest() *GetProvisioningV1ServiceTypesBadRequest {
	return &GetProvisioningV1ServiceTypesBadRequest{}
}

/* GetProvisioningV1ServiceTypesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProvisioningV1ServiceTypesBadRequest struct {
	Payload *models.ErrrErrorResponse
}

func (o *GetProvisioningV1ServiceTypesBadRequest) Error() string {
	return fmt.Sprintf("[GET /provisioning/v1/service-types][%d] getProvisioningV1ServiceTypesBadRequest  %+v", 400, o.Payload)
}
func (o *GetProvisioningV1ServiceTypesBadRequest) GetPayload() *models.ErrrErrorResponse {
	return o.Payload
}

func (o *GetProvisioningV1ServiceTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrrErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProvisioningV1ServiceTypesUnauthorized creates a GetProvisioningV1ServiceTypesUnauthorized with default headers values
func NewGetProvisioningV1ServiceTypesUnauthorized() *GetProvisioningV1ServiceTypesUnauthorized {
	return &GetProvisioningV1ServiceTypesUnauthorized{}
}

/* GetProvisioningV1ServiceTypesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetProvisioningV1ServiceTypesUnauthorized struct {
	Payload *models.ErrrErrorResponse
}

func (o *GetProvisioningV1ServiceTypesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /provisioning/v1/service-types][%d] getProvisioningV1ServiceTypesUnauthorized  %+v", 401, o.Payload)
}
func (o *GetProvisioningV1ServiceTypesUnauthorized) GetPayload() *models.ErrrErrorResponse {
	return o.Payload
}

func (o *GetProvisioningV1ServiceTypesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrrErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProvisioningV1ServiceTypesInternalServerError creates a GetProvisioningV1ServiceTypesInternalServerError with default headers values
func NewGetProvisioningV1ServiceTypesInternalServerError() *GetProvisioningV1ServiceTypesInternalServerError {
	return &GetProvisioningV1ServiceTypesInternalServerError{}
}

/* GetProvisioningV1ServiceTypesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetProvisioningV1ServiceTypesInternalServerError struct {
	Payload *models.ErrrErrorResponse
}

func (o *GetProvisioningV1ServiceTypesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /provisioning/v1/service-types][%d] getProvisioningV1ServiceTypesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetProvisioningV1ServiceTypesInternalServerError) GetPayload() *models.ErrrErrorResponse {
	return o.Payload
}

func (o *GetProvisioningV1ServiceTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrrErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
