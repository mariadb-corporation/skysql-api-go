// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetProvisioningV1Configs(params *GetProvisioningV1ConfigsParams, opts ...ClientOption) (*GetProvisioningV1ConfigsOK, error)

	GetProvisioningV1ConfigsConfigName(params *GetProvisioningV1ConfigsConfigNameParams, opts ...ClientOption) (*GetProvisioningV1ConfigsConfigNameOK, error)

	GetProvisioningV1ProductsProductNameConfigs(params *GetProvisioningV1ProductsProductNameConfigsParams, opts ...ClientOption) (*GetProvisioningV1ProductsProductNameConfigsOK, error)

	PostProvisioningV1Configs(params *PostProvisioningV1ConfigsParams, opts ...ClientOption) (*PostProvisioningV1ConfigsAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetProvisioningV1Configs lists user configs

  Retrieve a list of User configs
*/
func (a *Client) GetProvisioningV1Configs(params *GetProvisioningV1ConfigsParams, opts ...ClientOption) (*GetProvisioningV1ConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1Configs",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1Configs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1ConfigsConfigName users config

  Retrieve Config and it's values
*/
func (a *Client) GetProvisioningV1ConfigsConfigName(params *GetProvisioningV1ConfigsConfigNameParams, opts ...ClientOption) (*GetProvisioningV1ConfigsConfigNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ConfigsConfigNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1ConfigsConfigName",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/configs/:config_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ConfigsConfigNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ConfigsConfigNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1ConfigsConfigName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProvisioningV1ProductsProductNameConfigs lists available config keys

  Retrieve a list of configs keys
*/
func (a *Client) GetProvisioningV1ProductsProductNameConfigs(params *GetProvisioningV1ProductsProductNameConfigsParams, opts ...ClientOption) (*GetProvisioningV1ProductsProductNameConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvisioningV1ProductsProductNameConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProvisioningV1ProductsProductNameConfigs",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/products/{product_name}/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProvisioningV1ProductsProductNameConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProvisioningV1ProductsProductNameConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProvisioningV1ProductsProductNameConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostProvisioningV1Configs users config

  Create Config
*/
func (a *Client) PostProvisioningV1Configs(params *PostProvisioningV1ConfigsParams, opts ...ClientOption) (*PostProvisioningV1ConfigsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProvisioningV1ConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProvisioningV1Configs",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProvisioningV1ConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProvisioningV1ConfigsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProvisioningV1Configs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
