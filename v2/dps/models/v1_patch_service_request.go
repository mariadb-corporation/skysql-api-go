// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PatchServiceRequest Update service request
//
// swagger:model v1.PatchServiceRequest
type V1PatchServiceRequest struct {

	// applications
	Applications interface{} `json:"applications,omitempty"`

	// cert
	Cert *V1Certificate `json:"cert,omitempty"`

	// endpoints
	Endpoints []*V1Endpoint `json:"endpoints"`

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// ips
	Ips []string `json:"ips"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this v1 patch service request
func (m *V1PatchServiceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PatchServiceRequest) validateCert(formats strfmt.Registry) error {
	if swag.IsZero(m.Cert) { // not required
		return nil
	}

	if m.Cert != nil {
		if err := m.Cert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cert")
			}
			return err
		}
	}

	return nil
}

func (m *V1PatchServiceRequest) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 patch service request based on the context it is used
func (m *V1PatchServiceRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PatchServiceRequest) contextValidateCert(ctx context.Context, formats strfmt.Registry) error {

	if m.Cert != nil {
		if err := m.Cert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cert")
			}
			return err
		}
	}

	return nil
}

func (m *V1PatchServiceRequest) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Endpoints); i++ {

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1PatchServiceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PatchServiceRequest) UnmarshalBinary(b []byte) error {
	var res V1PatchServiceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
