// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ConfigWithValuesResponse ConfigWithValuesResponse
//
// swagger:model v1.ConfigWithValuesResponse
type V1ConfigWithValuesResponse struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// product configs
	ProductConfigs map[string][]V1ConfigValues `json:"product_configs,omitempty"`
}

// Validate validates this v1 config with values response
func (m *V1ConfigWithValuesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ConfigWithValuesResponse) validateProductConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductConfigs) { // not required
		return nil
	}

	for k := range m.ProductConfigs {

		if err := validate.Required("product_configs"+"."+k, "body", m.ProductConfigs[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.ProductConfigs[k]); i++ {

			if err := m.ProductConfigs[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_configs" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("product_configs" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// ContextValidate validate this v1 config with values response based on the context it is used
func (m *V1ConfigWithValuesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProductConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ConfigWithValuesResponse) contextValidateProductConfigs(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ProductConfigs {

		for i := 0; i < len(m.ProductConfigs[k]); i++ {

			if err := m.ProductConfigs[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_configs" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("product_configs" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ConfigWithValuesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ConfigWithValuesResponse) UnmarshalBinary(b []byte) error {
	var res V1ConfigWithValuesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
